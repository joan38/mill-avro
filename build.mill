//| mill-version: 1.0.1-native
//| mvnDeps:
//| - com.goyeau::mill-git::0.3.0
//| - com.goyeau::mill-scalafix::0.6.0
//| - org.typelevel::scalac-options:0.1.8

import com.goyeau.mill.git.{GitVersionModule, GitVersionedPublishModule}
import com.goyeau.mill.scalafix.StyleModule
import mill.*
import mill.api.Cross
import mill.scalalib.*
import mill.scalalib.publish.{Developer, License, PomSettings, VersionControl}
import org.typelevel.scalacoptions.ScalacOptions.*
import org.typelevel.scalacoptions.{ScalaVersion, ScalacOptions}

object `mill-avro` extends Cross[MillAvroCross]("1.0.0")
trait MillAvroCross
    extends Cross.Module[String]
    with StyleModule
    with GitVersionedPublishModule
    with SonatypeCentralPublishModule:
  val millVersion           = crossValue
  override def scalaVersion = "3.7.1"
  override def scalacOptions = super.scalacOptions() ++ ScalacOptions.tokensForVersion(
    ScalaVersion.unsafeFromString(scalaVersion()),
    ScalacOptions.default + source3 ++ fatalWarningOptions
  )

  override def compileMvnDeps = super.compileMvnDeps() ++ Seq(
    mvn"com.lihaoyi::mill-libs-scalalib:$millVersion"
  )
  override def mvnDeps = super.mvnDeps() ++ avroHugger

  lazy val avroHugger =
    val version = "2.12.0"
    Seq(
      mvn"com.julianpeeters::avrohugger-core:$version",
      mvn"com.julianpeeters::avrohugger-filesorter:$version"
    )

  override def artifactName   = s"mill-avro_mill${millBinaryVersion(millVersion)}"
  override def publishVersion = GitVersionModule.version(withSnapshotSuffix = true)()
  def pomSettings = PomSettings(
    description =
      "A Mill plugin for generating Scala case classes and ADTs from Apache Avro schemas, datafiles, and protocols",
    organization = "com.goyeau",
    url = "https://github.com/joan38/mill-avro",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("joan38", "mill-avro"),
    developers = Seq(Developer("joan38", "Joan Goyeau", "https://github.com/joan38"))
  )
end MillAvroCross

def millBinaryVersion(millVersion: String) = millVersion match
  case version if version.startsWith("0.12") => "0.11" // 0.12.x is binary compatible with 0.11.x
  case version if version.startsWith("1.")   => "1"
  case _ => throw IllegalArgumentException(s"Unsupported Mill version: $millVersion")
